apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: openshift-gitops-argocd-instance
  namespace: policy
  annotations:
    policy.open-cluster-management.io/standards: NIST-CSF
    policy.open-cluster-management.io/categories: PR.DS Data Security
    policy.open-cluster-management.io/controls: PR.DS-1 Data-at-rest
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: openshift-gitops-argocd-instance
        spec:
          remediationAction: enforce
          severity: med
          namespaceSelector:
            exclude:
              - kube-*
            include:
              - default
          object-templates:
            - complianceType: musthave
              objectDefinition:
                # This is an auto-generated file. DO NOT EDIT
                apiVersion: argoproj.io/v1alpha1
                kind: ArgoCD
                metadata:
                  name: openshift-gitops-cntk
                spec:
                  server:
                    autoscale:
                      enabled: false
                    grpc:
                      ingress:
                        enabled: false
                    ingress:
                      enabled: false
                    resources:
                      limits:
                        cpu: 500m
                        memory: 256Mi
                      requests:
                        cpu: 125m
                        memory: 128Mi
                    route:
                      enabled: true
                    service:
                      type: ''
                  grafana:
                    enabled: false
                    ingress:
                      enabled: false
                    resources:
                      limits:
                        cpu: 500m
                        memory: 256Mi
                      requests:
                        cpu: 250m
                        memory: 128Mi
                    route:
                      enabled: false
                  prometheus:
                    enabled: false
                    ingress:
                      enabled: false
                    route:
                      enabled: false
                  initialSSHKnownHosts: {}
                  resourceCustomizations: |
                    argoproj.io/Application:
                      ignoreDifferences: |
                        jsonPointers:
                        - /spec/source/targetRevision
                        - /spec/source/repoURL
                    argoproj.io/AppProject:
                      ignoreDifferences: |
                        jsonPointers:
                        - /spec/sourceRepos
                    operators.coreos.com/OperatorGroup:
                      ignoreDifferences: |
                        jsonPointers:
                        - /metadata/annotations/olm.providedAPIs
                    operators.coreos.com/InstallPlan:
                      health.lua: |
                        hs = {}
                        if obj.status ~= nil then
                          if obj.status.phase ~= nil then
                            hs.message = obj.status.phase
                            if obj.status.phase == "Complete" then
                              hs.status = "Healthy"
                            else
                              hs.status = "Progressing"
                            end
                            return hs
                          end
                        end
                        hs.status = "Progressing"
                        hs.message = "Unknown"
                        return hs
                    operators.coreos.com/Subscription:
                      health.lua: |
                        hs = {}
                        if obj.status ~= nil then
                          if obj.status.installedCSV ~= nil then
                            hs.status = "Healthy"
                            hs.message = "CSV Installed"
                            if obj.status.state ~= nil then
                              hs.message = obj.status.state
                            end
                            return hs
                          end
                        end
                        hs.status = "Progressing"
                        hs.message = "Unknown"
                        if obj.status.state ~= nil then
                          hs.message = obj.status.state
                        end
                        return hs
                    operator.ibm.com/CommonService:
                      health.lua: |
                        hs = {}
                        if obj.status ~= nil then
                          if obj.status.phase ~= nil then
                            hs.message = obj.status.phase
                            if obj.status.phase == "Succeeded" then
                              hs.status = "Healthy"
                            else
                              hs.status = "Progressing"
                            end
                            return hs
                          end
                        end
                        hs.status = "Progressing"
                        hs.message = "Unknown"
                        return hs
                    mq.ibm.com/QueueManager:
                      health.lua: |
                        hs = {}
                        if obj.status ~= nil then
                          if obj.status.phase ~= nil then
                            hs.message = obj.status.phase
                            if obj.status.phase == "Running" then
                              hs.status = "Healthy"
                            else
                              hs.status = "Progressing"
                            end
                            return hs
                          end
                        end
                        hs.status = "Progressing"
                        hs.message = "Unknown"
                        return hs                  
                  applicationSet:
                    resources:
                      limits:
                        cpu: '2'
                        memory: 1Gi
                      requests:
                        cpu: 250m
                        memory: 512Mi
                  rbac: {}
                  repo:
                    resources:
                      limits:
                        cpu: '1'
                        memory: 512Mi
                      requests:
                        cpu: 250m
                        memory: 256Mi
                  resourceExclusions: |
                    - apiGroups:
                      - tekton.dev
                      clusters:
                      - '*'
                      kinds:
                      - TaskRun
                      - PipelineRun
                  dex:
                    resources:
                      limits:
                        cpu: 500m
                        memory: 256Mi
                      requests:
                        cpu: 250m
                        memory: 128Mi
                  ha:
                    enabled: false
                    resources:
                      limits:
                        cpu: 500m
                        memory: 256Mi
                      requests:
                        cpu: 250m
                        memory: 128Mi
                  tls:
                    ca: {}
                  redis:
                    resources:
                      limits:
                        cpu: 500m
                        memory: 256Mi
                      requests:
                        cpu: 250m
                        memory: 128Mi
                  controller:
                    processors: {}
                    resources:
                      limits:
                        cpu: '2'
                        memory: 4Gi
                      requests:
                        cpu: 250m
                        memory: 1Gi
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: argo-instance-policy
  namespace: policy
placementRef:
  name: all-openshift
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
  - name: openshift-gitops-argocd-instance
    kind: Policy
    apiGroup: policy.open-cluster-management.io